// Code generated by MockGen. DO NOT EDIT.
// Source: domain/user_activity_field.go
//
// Generated by this command:
//
//	mockgen -source=domain/user_activity_field.go -destination=mocks/user_activity_field.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "ppo/domain"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIInteractor is a mock of IInteractor interface.
type MockIInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockIInteractorMockRecorder
}

// MockIInteractorMockRecorder is the mock recorder for MockIInteractor.
type MockIInteractorMockRecorder struct {
	mock *MockIInteractor
}

// NewMockIInteractor creates a new mock instance.
func NewMockIInteractor(ctrl *gomock.Controller) *MockIInteractor {
	mock := &MockIInteractor{ctrl: ctrl}
	mock.recorder = &MockIInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInteractor) EXPECT() *MockIInteractorMockRecorder {
	return m.recorder
}

// CalculateUserRating mocks base method.
func (m *MockIInteractor) CalculateUserRating(id uuid.UUID) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateUserRating", id)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateUserRating indicates an expected call of CalculateUserRating.
func (mr *MockIInteractorMockRecorder) CalculateUserRating(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateUserRating", reflect.TypeOf((*MockIInteractor)(nil).CalculateUserRating), id)
}

// GetMostProfitableCompany mocks base method.
func (m *MockIInteractor) GetMostProfitableCompany(period *domain.Period, companies []*domain.Company) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMostProfitableCompany", period, companies)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMostProfitableCompany indicates an expected call of GetMostProfitableCompany.
func (mr *MockIInteractorMockRecorder) GetMostProfitableCompany(period, companies any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMostProfitableCompany", reflect.TypeOf((*MockIInteractor)(nil).GetMostProfitableCompany), period, companies)
}

// GetUserFinancialReport mocks base method.
func (m *MockIInteractor) GetUserFinancialReport(id uuid.UUID, period *domain.Period) (*domain.FinancialReportByPeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFinancialReport", id, period)
	ret0, _ := ret[0].(*domain.FinancialReportByPeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFinancialReport indicates an expected call of GetUserFinancialReport.
func (mr *MockIInteractorMockRecorder) GetUserFinancialReport(id, period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFinancialReport", reflect.TypeOf((*MockIInteractor)(nil).GetUserFinancialReport), id, period)
}
