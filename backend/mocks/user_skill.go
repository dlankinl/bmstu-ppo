// Code generated by MockGen. DO NOT EDIT.
// Source: domain/user_skill.go
//
// Generated by this command:
//
//	mockgen -source=domain/user_skill.go -destination=mocks/user_skill.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "ppo/domain"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserSkillRepository is a mock of IUserSkillRepository interface.
type MockIUserSkillRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserSkillRepositoryMockRecorder
}

// MockIUserSkillRepositoryMockRecorder is the mock recorder for MockIUserSkillRepository.
type MockIUserSkillRepositoryMockRecorder struct {
	mock *MockIUserSkillRepository
}

// NewMockIUserSkillRepository creates a new mock instance.
func NewMockIUserSkillRepository(ctrl *gomock.Controller) *MockIUserSkillRepository {
	mock := &MockIUserSkillRepository{ctrl: ctrl}
	mock.recorder = &MockIUserSkillRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserSkillRepository) EXPECT() *MockIUserSkillRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserSkillRepository) Create(ctx context.Context, pair *domain.UserSkill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pair)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUserSkillRepositoryMockRecorder) Create(ctx, pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserSkillRepository)(nil).Create), ctx, pair)
}

// Delete mocks base method.
func (m *MockIUserSkillRepository) Delete(ctx context.Context, pair *domain.UserSkill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, pair)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserSkillRepositoryMockRecorder) Delete(ctx, pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserSkillRepository)(nil).Delete), ctx, pair)
}

// GetUserSkillsBySkillId mocks base method.
func (m *MockIUserSkillRepository) GetUserSkillsBySkillId(ctx context.Context, skillId uuid.UUID) ([]*domain.UserSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSkillsBySkillId", ctx, skillId)
	ret0, _ := ret[0].([]*domain.UserSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSkillsBySkillId indicates an expected call of GetUserSkillsBySkillId.
func (mr *MockIUserSkillRepositoryMockRecorder) GetUserSkillsBySkillId(ctx, skillId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSkillsBySkillId", reflect.TypeOf((*MockIUserSkillRepository)(nil).GetUserSkillsBySkillId), ctx, skillId)
}

// GetUserSkillsByUserId mocks base method.
func (m *MockIUserSkillRepository) GetUserSkillsByUserId(ctx context.Context, userId uuid.UUID) ([]*domain.UserSkill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSkillsByUserId", ctx, userId)
	ret0, _ := ret[0].([]*domain.UserSkill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSkillsByUserId indicates an expected call of GetUserSkillsByUserId.
func (mr *MockIUserSkillRepositoryMockRecorder) GetUserSkillsByUserId(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSkillsByUserId", reflect.TypeOf((*MockIUserSkillRepository)(nil).GetUserSkillsByUserId), ctx, userId)
}

// MockIUserSkillService is a mock of IUserSkillService interface.
type MockIUserSkillService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserSkillServiceMockRecorder
}

// MockIUserSkillServiceMockRecorder is the mock recorder for MockIUserSkillService.
type MockIUserSkillServiceMockRecorder struct {
	mock *MockIUserSkillService
}

// NewMockIUserSkillService creates a new mock instance.
func NewMockIUserSkillService(ctrl *gomock.Controller) *MockIUserSkillService {
	mock := &MockIUserSkillService{ctrl: ctrl}
	mock.recorder = &MockIUserSkillServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserSkillService) EXPECT() *MockIUserSkillServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIUserSkillService) Create(ctx context.Context, pair *domain.UserSkill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, pair)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIUserSkillServiceMockRecorder) Create(ctx, pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserSkillService)(nil).Create), ctx, pair)
}

// Delete mocks base method.
func (m *MockIUserSkillService) Delete(ctx context.Context, pair *domain.UserSkill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, pair)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIUserSkillServiceMockRecorder) Delete(ctx, pair any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIUserSkillService)(nil).Delete), ctx, pair)
}

// GetSkillsForUser mocks base method.
func (m *MockIUserSkillService) GetSkillsForUser(ctx context.Context, userId uuid.UUID) ([]*domain.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSkillsForUser", ctx, userId)
	ret0, _ := ret[0].([]*domain.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSkillsForUser indicates an expected call of GetSkillsForUser.
func (mr *MockIUserSkillServiceMockRecorder) GetSkillsForUser(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSkillsForUser", reflect.TypeOf((*MockIUserSkillService)(nil).GetSkillsForUser), ctx, userId)
}

// GetUsersForSkill mocks base method.
func (m *MockIUserSkillService) GetUsersForSkill(ctx context.Context, skillId uuid.UUID) ([]*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersForSkill", ctx, skillId)
	ret0, _ := ret[0].([]*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersForSkill indicates an expected call of GetUsersForSkill.
func (mr *MockIUserSkillServiceMockRecorder) GetUsersForSkill(ctx, skillId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersForSkill", reflect.TypeOf((*MockIUserSkillService)(nil).GetUsersForSkill), ctx, skillId)
}
