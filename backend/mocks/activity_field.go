// Code generated by MockGen. DO NOT EDIT.
// Source: domain/activity_field.go
//
// Generated by this command:
//
//	mockgen -source=domain/activity_field.go -destination=mocks/activity_field.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "ppo/domain"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIActivityFieldRepository is a mock of IActivityFieldRepository interface.
type MockIActivityFieldRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIActivityFieldRepositoryMockRecorder
}

// MockIActivityFieldRepositoryMockRecorder is the mock recorder for MockIActivityFieldRepository.
type MockIActivityFieldRepositoryMockRecorder struct {
	mock *MockIActivityFieldRepository
}

// NewMockIActivityFieldRepository creates a new mock instance.
func NewMockIActivityFieldRepository(ctrl *gomock.Controller) *MockIActivityFieldRepository {
	mock := &MockIActivityFieldRepository{ctrl: ctrl}
	mock.recorder = &MockIActivityFieldRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIActivityFieldRepository) EXPECT() *MockIActivityFieldRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIActivityFieldRepository) Create(arg0 context.Context, arg1 *domain.ActivityField) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIActivityFieldRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIActivityFieldRepository)(nil).Create), arg0, arg1)
}

// DeleteById mocks base method.
func (m *MockIActivityFieldRepository) DeleteById(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIActivityFieldRepositoryMockRecorder) DeleteById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIActivityFieldRepository)(nil).DeleteById), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIActivityFieldRepository) GetAll(arg0 context.Context, arg1 int) ([]*domain.ActivityField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].([]*domain.ActivityField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIActivityFieldRepositoryMockRecorder) GetAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIActivityFieldRepository)(nil).GetAll), arg0, arg1)
}

// GetById mocks base method.
func (m *MockIActivityFieldRepository) GetById(arg0 context.Context, arg1 uuid.UUID) (*domain.ActivityField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*domain.ActivityField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIActivityFieldRepositoryMockRecorder) GetById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIActivityFieldRepository)(nil).GetById), arg0, arg1)
}

// GetMaxCost mocks base method.
func (m *MockIActivityFieldRepository) GetMaxCost(arg0 context.Context) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxCost", arg0)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxCost indicates an expected call of GetMaxCost.
func (mr *MockIActivityFieldRepositoryMockRecorder) GetMaxCost(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxCost", reflect.TypeOf((*MockIActivityFieldRepository)(nil).GetMaxCost), arg0)
}

// Update mocks base method.
func (m *MockIActivityFieldRepository) Update(arg0 context.Context, arg1 *domain.ActivityField) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIActivityFieldRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIActivityFieldRepository)(nil).Update), arg0, arg1)
}

// MockIActivityFieldService is a mock of IActivityFieldService interface.
type MockIActivityFieldService struct {
	ctrl     *gomock.Controller
	recorder *MockIActivityFieldServiceMockRecorder
}

// MockIActivityFieldServiceMockRecorder is the mock recorder for MockIActivityFieldService.
type MockIActivityFieldServiceMockRecorder struct {
	mock *MockIActivityFieldService
}

// NewMockIActivityFieldService creates a new mock instance.
func NewMockIActivityFieldService(ctrl *gomock.Controller) *MockIActivityFieldService {
	mock := &MockIActivityFieldService{ctrl: ctrl}
	mock.recorder = &MockIActivityFieldServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIActivityFieldService) EXPECT() *MockIActivityFieldServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIActivityFieldService) Create(arg0 context.Context, arg1 *domain.ActivityField) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIActivityFieldServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIActivityFieldService)(nil).Create), arg0, arg1)
}

// DeleteById mocks base method.
func (m *MockIActivityFieldService) DeleteById(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIActivityFieldServiceMockRecorder) DeleteById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIActivityFieldService)(nil).DeleteById), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIActivityFieldService) GetAll(arg0 context.Context, arg1 int) ([]*domain.ActivityField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].([]*domain.ActivityField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIActivityFieldServiceMockRecorder) GetAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIActivityFieldService)(nil).GetAll), arg0, arg1)
}

// GetById mocks base method.
func (m *MockIActivityFieldService) GetById(arg0 context.Context, arg1 uuid.UUID) (*domain.ActivityField, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*domain.ActivityField)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIActivityFieldServiceMockRecorder) GetById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIActivityFieldService)(nil).GetById), arg0, arg1)
}

// GetCostByCompanyId mocks base method.
func (m *MockIActivityFieldService) GetCostByCompanyId(arg0 context.Context, arg1 uuid.UUID) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCostByCompanyId", arg0, arg1)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCostByCompanyId indicates an expected call of GetCostByCompanyId.
func (mr *MockIActivityFieldServiceMockRecorder) GetCostByCompanyId(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCostByCompanyId", reflect.TypeOf((*MockIActivityFieldService)(nil).GetCostByCompanyId), arg0, arg1)
}

// GetMaxCost mocks base method.
func (m *MockIActivityFieldService) GetMaxCost(arg0 context.Context) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxCost", arg0)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxCost indicates an expected call of GetMaxCost.
func (mr *MockIActivityFieldServiceMockRecorder) GetMaxCost(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxCost", reflect.TypeOf((*MockIActivityFieldService)(nil).GetMaxCost), arg0)
}

// Update mocks base method.
func (m *MockIActivityFieldService) Update(arg0 context.Context, arg1 *domain.ActivityField) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIActivityFieldServiceMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIActivityFieldService)(nil).Update), arg0, arg1)
}
