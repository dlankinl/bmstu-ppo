// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/base/hash.go
//
// Generated by this command:
//
//	mockgen -source=pkg/base/hash.go -destination=mocks/hash.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIHashCrypto is a mock of IHashCrypto interface.
type MockIHashCrypto struct {
	ctrl     *gomock.Controller
	recorder *MockIHashCryptoMockRecorder
}

// MockIHashCryptoMockRecorder is the mock recorder for MockIHashCrypto.
type MockIHashCryptoMockRecorder struct {
	mock *MockIHashCrypto
}

// NewMockIHashCrypto creates a new mock instance.
func NewMockIHashCrypto(ctrl *gomock.Controller) *MockIHashCrypto {
	mock := &MockIHashCrypto{ctrl: ctrl}
	mock.recorder = &MockIHashCryptoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHashCrypto) EXPECT() *MockIHashCryptoMockRecorder {
	return m.recorder
}

// CheckPasswordHash mocks base method.
func (m *MockIHashCrypto) CheckPasswordHash(password, hash string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPasswordHash", password, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPasswordHash indicates an expected call of CheckPasswordHash.
func (mr *MockIHashCryptoMockRecorder) CheckPasswordHash(password, hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPasswordHash", reflect.TypeOf((*MockIHashCrypto)(nil).CheckPasswordHash), password, hash)
}

// GenerateHashPass mocks base method.
func (m *MockIHashCrypto) GenerateHashPass(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateHashPass", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateHashPass indicates an expected call of GenerateHashPass.
func (mr *MockIHashCryptoMockRecorder) GenerateHashPass(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateHashPass", reflect.TypeOf((*MockIHashCrypto)(nil).GenerateHashPass), password)
}
