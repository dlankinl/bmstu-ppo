// Code generated by MockGen. DO NOT EDIT.
// Source: domain/company.go
//
// Generated by this command:
//
//	mockgen -source=domain/company.go -destination=mocks/company.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "ppo/domain"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockICompanyRepository is a mock of ICompanyRepository interface.
type MockICompanyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICompanyRepositoryMockRecorder
}

// MockICompanyRepositoryMockRecorder is the mock recorder for MockICompanyRepository.
type MockICompanyRepositoryMockRecorder struct {
	mock *MockICompanyRepository
}

// NewMockICompanyRepository creates a new mock instance.
func NewMockICompanyRepository(ctrl *gomock.Controller) *MockICompanyRepository {
	mock := &MockICompanyRepository{ctrl: ctrl}
	mock.recorder = &MockICompanyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICompanyRepository) EXPECT() *MockICompanyRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICompanyRepository) Create(ctx context.Context, company *domain.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICompanyRepositoryMockRecorder) Create(ctx, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICompanyRepository)(nil).Create), ctx, company)
}

// DeleteById mocks base method.
func (m *MockICompanyRepository) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockICompanyRepositoryMockRecorder) DeleteById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockICompanyRepository)(nil).DeleteById), ctx, id)
}

// GetAll mocks base method.
func (m *MockICompanyRepository) GetAll(ctx context.Context, page int) ([]*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, page)
	ret0, _ := ret[0].([]*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockICompanyRepositoryMockRecorder) GetAll(ctx, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockICompanyRepository)(nil).GetAll), ctx, page)
}

// GetById mocks base method.
func (m *MockICompanyRepository) GetById(ctx context.Context, id uuid.UUID) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockICompanyRepositoryMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockICompanyRepository)(nil).GetById), ctx, id)
}

// GetByOwnerId mocks base method.
func (m *MockICompanyRepository) GetByOwnerId(ctx context.Context, id uuid.UUID, page int, isPaginated bool) ([]*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOwnerId", ctx, id, page, isPaginated)
	ret0, _ := ret[0].([]*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOwnerId indicates an expected call of GetByOwnerId.
func (mr *MockICompanyRepositoryMockRecorder) GetByOwnerId(ctx, id, page, isPaginated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOwnerId", reflect.TypeOf((*MockICompanyRepository)(nil).GetByOwnerId), ctx, id, page, isPaginated)
}

// Update mocks base method.
func (m *MockICompanyRepository) Update(ctx context.Context, company *domain.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, company)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICompanyRepositoryMockRecorder) Update(ctx, company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICompanyRepository)(nil).Update), ctx, company)
}

// MockICompanyService is a mock of ICompanyService interface.
type MockICompanyService struct {
	ctrl     *gomock.Controller
	recorder *MockICompanyServiceMockRecorder
}

// MockICompanyServiceMockRecorder is the mock recorder for MockICompanyService.
type MockICompanyServiceMockRecorder struct {
	mock *MockICompanyService
}

// NewMockICompanyService creates a new mock instance.
func NewMockICompanyService(ctrl *gomock.Controller) *MockICompanyService {
	mock := &MockICompanyService{ctrl: ctrl}
	mock.recorder = &MockICompanyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICompanyService) EXPECT() *MockICompanyServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockICompanyService) Create(company *domain.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", company)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockICompanyServiceMockRecorder) Create(company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICompanyService)(nil).Create), company)
}

// DeleteById mocks base method.
func (m *MockICompanyService) DeleteById(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockICompanyServiceMockRecorder) DeleteById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockICompanyService)(nil).DeleteById), id)
}

// GetAll mocks base method.
func (m *MockICompanyService) GetAll(page int) ([]*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", page)
	ret0, _ := ret[0].([]*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockICompanyServiceMockRecorder) GetAll(page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockICompanyService)(nil).GetAll), page)
}

// GetById mocks base method.
func (m *MockICompanyService) GetById(id uuid.UUID) (*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockICompanyServiceMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockICompanyService)(nil).GetById), id)
}

// GetByOwnerId mocks base method.
func (m *MockICompanyService) GetByOwnerId(id uuid.UUID, page int, isPaginated bool) ([]*domain.Company, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByOwnerId", id, page, isPaginated)
	ret0, _ := ret[0].([]*domain.Company)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByOwnerId indicates an expected call of GetByOwnerId.
func (mr *MockICompanyServiceMockRecorder) GetByOwnerId(id, page, isPaginated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByOwnerId", reflect.TypeOf((*MockICompanyService)(nil).GetByOwnerId), id, page, isPaginated)
}

// Update mocks base method.
func (m *MockICompanyService) Update(company *domain.Company) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", company)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICompanyServiceMockRecorder) Update(company any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICompanyService)(nil).Update), company)
}
