// Code generated by MockGen. DO NOT EDIT.
// Source: domain/skill.go
//
// Generated by this command:
//
//	mockgen -source=domain/skill.go -destination=mocks/skill.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "ppo/domain"
	utils "ppo/pkg/utils"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockISkillRepository is a mock of ISkillRepository interface.
type MockISkillRepository struct {
	ctrl     *gomock.Controller
	recorder *MockISkillRepositoryMockRecorder
}

// MockISkillRepositoryMockRecorder is the mock recorder for MockISkillRepository.
type MockISkillRepositoryMockRecorder struct {
	mock *MockISkillRepository
}

// NewMockISkillRepository creates a new mock instance.
func NewMockISkillRepository(ctrl *gomock.Controller) *MockISkillRepository {
	mock := &MockISkillRepository{ctrl: ctrl}
	mock.recorder = &MockISkillRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISkillRepository) EXPECT() *MockISkillRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISkillRepository) Create(ctx context.Context, skill *domain.Skill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, skill)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockISkillRepositoryMockRecorder) Create(ctx, skill any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISkillRepository)(nil).Create), ctx, skill)
}

// DeleteById mocks base method.
func (m *MockISkillRepository) DeleteById(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockISkillRepositoryMockRecorder) DeleteById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockISkillRepository)(nil).DeleteById), ctx, id)
}

// GetAll mocks base method.
func (m *MockISkillRepository) GetAll(ctx context.Context, page int) ([]*domain.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, page)
	ret0, _ := ret[0].([]*domain.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockISkillRepositoryMockRecorder) GetAll(ctx, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockISkillRepository)(nil).GetAll), ctx, page)
}

// GetById mocks base method.
func (m *MockISkillRepository) GetById(ctx context.Context, id uuid.UUID) (*domain.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*domain.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockISkillRepositoryMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockISkillRepository)(nil).GetById), ctx, id)
}

// Update mocks base method.
func (m *MockISkillRepository) Update(ctx context.Context, skill *domain.Skill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, skill)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockISkillRepositoryMockRecorder) Update(ctx, skill any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockISkillRepository)(nil).Update), ctx, skill)
}

// MockISkillService is a mock of ISkillService interface.
type MockISkillService struct {
	ctrl     *gomock.Controller
	recorder *MockISkillServiceMockRecorder
}

// MockISkillServiceMockRecorder is the mock recorder for MockISkillService.
type MockISkillServiceMockRecorder struct {
	mock *MockISkillService
}

// NewMockISkillService creates a new mock instance.
func NewMockISkillService(ctrl *gomock.Controller) *MockISkillService {
	mock := &MockISkillService{ctrl: ctrl}
	mock.recorder = &MockISkillServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISkillService) EXPECT() *MockISkillServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockISkillService) Create(skill *domain.Skill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", skill)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockISkillServiceMockRecorder) Create(skill any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockISkillService)(nil).Create), skill)
}

// DeleteById mocks base method.
func (m *MockISkillService) DeleteById(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockISkillServiceMockRecorder) DeleteById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockISkillService)(nil).DeleteById), id)
}

// GetAll mocks base method.
func (m *MockISkillService) GetAll(filters utils.Filters, page int) ([]*domain.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", filters, page)
	ret0, _ := ret[0].([]*domain.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockISkillServiceMockRecorder) GetAll(filters, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockISkillService)(nil).GetAll), filters, page)
}

// GetById mocks base method.
func (m *MockISkillService) GetById(id uuid.UUID) (*domain.Skill, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*domain.Skill)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockISkillServiceMockRecorder) GetById(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockISkillService)(nil).GetById), id)
}

// Update mocks base method.
func (m *MockISkillService) Update(skill *domain.Skill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", skill)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockISkillServiceMockRecorder) Update(skill any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockISkillService)(nil).Update), skill)
}
