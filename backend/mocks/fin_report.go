// Code generated by MockGen. DO NOT EDIT.
// Source: domain/fin_report.go
//
// Generated by this command:
//
//	mockgen -source=domain/fin_report.go -destination=mocks/fin_report.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	domain "ppo/domain"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIFinancialReportRepository is a mock of IFinancialReportRepository interface.
type MockIFinancialReportRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIFinancialReportRepositoryMockRecorder
}

// MockIFinancialReportRepositoryMockRecorder is the mock recorder for MockIFinancialReportRepository.
type MockIFinancialReportRepositoryMockRecorder struct {
	mock *MockIFinancialReportRepository
}

// NewMockIFinancialReportRepository creates a new mock instance.
func NewMockIFinancialReportRepository(ctrl *gomock.Controller) *MockIFinancialReportRepository {
	mock := &MockIFinancialReportRepository{ctrl: ctrl}
	mock.recorder = &MockIFinancialReportRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFinancialReportRepository) EXPECT() *MockIFinancialReportRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIFinancialReportRepository) Create(arg0 context.Context, arg1 *domain.FinancialReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIFinancialReportRepositoryMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIFinancialReportRepository)(nil).Create), arg0, arg1)
}

// DeleteById mocks base method.
func (m *MockIFinancialReportRepository) DeleteById(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIFinancialReportRepositoryMockRecorder) DeleteById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIFinancialReportRepository)(nil).DeleteById), arg0, arg1)
}

// GetByCompany mocks base method.
func (m *MockIFinancialReportRepository) GetByCompany(arg0 context.Context, arg1 uuid.UUID, arg2 *domain.Period) (*domain.FinancialReportByPeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCompany", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.FinancialReportByPeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCompany indicates an expected call of GetByCompany.
func (mr *MockIFinancialReportRepositoryMockRecorder) GetByCompany(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCompany", reflect.TypeOf((*MockIFinancialReportRepository)(nil).GetByCompany), arg0, arg1, arg2)
}

// GetById mocks base method.
func (m *MockIFinancialReportRepository) GetById(arg0 context.Context, arg1 uuid.UUID) (*domain.FinancialReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*domain.FinancialReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIFinancialReportRepositoryMockRecorder) GetById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIFinancialReportRepository)(nil).GetById), arg0, arg1)
}

// Update mocks base method.
func (m *MockIFinancialReportRepository) Update(arg0 context.Context, arg1 *domain.FinancialReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIFinancialReportRepositoryMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIFinancialReportRepository)(nil).Update), arg0, arg1)
}

// MockIFinancialReportService is a mock of IFinancialReportService interface.
type MockIFinancialReportService struct {
	ctrl     *gomock.Controller
	recorder *MockIFinancialReportServiceMockRecorder
}

// MockIFinancialReportServiceMockRecorder is the mock recorder for MockIFinancialReportService.
type MockIFinancialReportServiceMockRecorder struct {
	mock *MockIFinancialReportService
}

// NewMockIFinancialReportService creates a new mock instance.
func NewMockIFinancialReportService(ctrl *gomock.Controller) *MockIFinancialReportService {
	mock := &MockIFinancialReportService{ctrl: ctrl}
	mock.recorder = &MockIFinancialReportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFinancialReportService) EXPECT() *MockIFinancialReportServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIFinancialReportService) Create(arg0 context.Context, arg1 *domain.FinancialReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIFinancialReportServiceMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIFinancialReportService)(nil).Create), arg0, arg1)
}

// CreateByPeriod mocks base method.
func (m *MockIFinancialReportService) CreateByPeriod(arg0 context.Context, arg1 *domain.FinancialReportByPeriod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateByPeriod", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateByPeriod indicates an expected call of CreateByPeriod.
func (mr *MockIFinancialReportServiceMockRecorder) CreateByPeriod(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateByPeriod", reflect.TypeOf((*MockIFinancialReportService)(nil).CreateByPeriod), arg0, arg1)
}

// DeleteById mocks base method.
func (m *MockIFinancialReportService) DeleteById(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockIFinancialReportServiceMockRecorder) DeleteById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockIFinancialReportService)(nil).DeleteById), arg0, arg1)
}

// GetByCompany mocks base method.
func (m *MockIFinancialReportService) GetByCompany(arg0 context.Context, arg1 uuid.UUID, arg2 *domain.Period) (*domain.FinancialReportByPeriod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByCompany", arg0, arg1, arg2)
	ret0, _ := ret[0].(*domain.FinancialReportByPeriod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByCompany indicates an expected call of GetByCompany.
func (mr *MockIFinancialReportServiceMockRecorder) GetByCompany(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByCompany", reflect.TypeOf((*MockIFinancialReportService)(nil).GetByCompany), arg0, arg1, arg2)
}

// GetById mocks base method.
func (m *MockIFinancialReportService) GetById(arg0 context.Context, arg1 uuid.UUID) (*domain.FinancialReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0, arg1)
	ret0, _ := ret[0].(*domain.FinancialReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIFinancialReportServiceMockRecorder) GetById(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIFinancialReportService)(nil).GetById), arg0, arg1)
}

// Update mocks base method.
func (m *MockIFinancialReportService) Update(arg0 context.Context, arg1 *domain.FinancialReport) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIFinancialReportServiceMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIFinancialReportService)(nil).Update), arg0, arg1)
}
